
class Solution {
public:
ListNode* merge(ListNode* left,ListNode* right)
{
    ListNode* temp=new ListNode(0);
    ListNode* prev=temp;
    while(left!=NULL && right!=NULL)
    {
        if(left->val<right->val)
        {
            prev->next=left;
            left=left->next;
        }
        else
        {
            prev->next=right;
            right=right->next;
        }
        prev=prev->next;
    }
    if(left!=NULL)
    {
        prev->next=left;
    }
    if(right!=NULL)
    {
        prev->next=right;
    }
    return temp->next;
}
    ListNode* sortList(ListNode* head) {
        if(head==NULL || head->next==NULL)
        {
            return head;
        }
        ListNode* mid=middle(head);
        ListNode* left=sortList(head);
        ListNode* right=sortList(mid);
        return merge(left,right);
    }
    ListNode* middle(ListNode* head)
    {
        ListNode* fast=head;
        ListNode* slow=nullptr;
        while(fast!=NULL && fast->next!=NULL)
        {
             slow=(slow==nullptr)?fast:slow->next;
            fast=fast->next->next;
           
        }
    ListNode* mid=slow->next;
    slow->next=NULL;
        return mid;
    }
};
