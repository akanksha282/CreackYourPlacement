 vector<int> distanceK(TreeNode* root, TreeNode* target, int k) {
        unordered_map<TreeNode*,TreeNode*>parent;
        unordered_map<TreeNode*,bool>vis;
        queue<TreeNode*>q;
        q.push(root);
        while(!q.empty())
        {
            int n=q.size();
            for(int i=0;i<n;i++)
            {
                TreeNode* curr=q.front();
                q.pop();
                if(curr->left!=NULL)
                {
                    q.push(curr->left);
                    parent[curr->left]=curr;
                }
                if(curr->right!=NULL)
                {
                    q.push(curr->right);
                    parent[curr->right]=curr;
                }
            }
        }
        q.push(target);
        vis[target]=true;
        int res=0;
        while(!q.empty())
        {
            if(res==k)
            {
                break;
            }
            res++;
            int n=q.size();
            for(int i=0;i<n;i++)
            {
                TreeNode* curr=q.front();
                q.pop();
                if(curr->left!=NULL && !vis[curr->left])
                {
                    q.push(curr->left);
                    vis[curr->left]=true;
                }
                if(curr->right!=NULL && !vis[curr->right])
                {
                    q.push(curr->right);
                    vis[curr->right]=true;
                }
                if(parent[curr] && !vis[parent[curr]])
                {
                    q.push(parent[curr]);
                    vis[parent[curr]]=true;
                }
            }
        }
        vector<int>ans;
        while(!q.empty())
        {
            int t=q.front()->val;
            q.pop();
            ans.push_back(t);
        }
        return ans;
    }
