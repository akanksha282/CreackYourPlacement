class Solution{
public:
    vector<vector<char>> fill(int n, int m, vector<vector<char>> mat)
    {
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                if((mat[i][j]=='O')&&(i==0 || i==n-1 || j==0 || j==m-1))
                {
                    dfs(i,j,mat);
                }
            }
        }
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                if(mat[i][j]=='N')
                {
                    mat[i][j]='O';
                }
               else if(mat[i][j]=='O')
                {
                    mat[i][j]='X';
                }
            }
        }
        return mat;
    }
    int row[4]={1,-1,0,0};
    int col[4]={0,0,1,-1};
    void dfs(int r,int c,vector<vector<char>>&mat)
    {
        if(r<0 || c<0 || r>=mat.size() || c>=mat[0].size() || mat[r][c]!='O')
        {
            return ;
        }
        mat[r][c]='N';
        for(int i=0;i<4;i++)
        {
            int x=r+row[i];
            int y=c+col[i];
            dfs(x,y,mat);
        }
    }
};
