// done using kmp
class Solution
{
    public:
    void helper(string t,vector<int>&lps)
    {
        int i=1,len=0;
        lps[0]=0;
        while(i<t.size())
        { 
            if(t[i]==t[len])
            {
                len++;
                lps[i]=len;
                i++;
            }
            else
            {
                if(len==0)
                {
                    lps[i]=0;
                    i++;
                }
                else
                {
                    len=lps[len-1];
                }
            }
            
        }
    
    }
        vector <int> search(string pattern, string text)
        {
            int n=pattern.size();
            vector<int>lps(n);
            helper(pattern,lps);
            vector<int>ans;
            int i=0,j=0,m=text.size();
            while(i<m)
            {
                if(pattern[j]==text[i])
                {
                    i++;
                    j++;
                }
                if(j==n)
                {
                    ans.push_back(i-j+1);
                    j=lps[j-1];
                }
                else if(i<m && pattern[j]!=text[i])
                {
                    if(j==0)
                    {
                        i++;
                    }
                    else
                    {
                        j=lps[j-1];
                    }
                }
            }
            return ans;
        }
     
};
